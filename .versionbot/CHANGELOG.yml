- commits:
    - subject: Improve planner loop detection
      hash: 5f718cc040000e07c0b27906ed8d7e5931a7298d
      body: |
        The planner would skip any action that was already added to the plan,
        however this would prevent repeat actions that modify the state
        incrementally. The planner now skips an action if it has been used
        before for the same state.
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
  version: 0.13.2
  title: ""
  date: 2023-07-10T03:04:57.456Z
- commits:
    - subject: Allow action tasks to return an Observable
      hash: 19f6a437a037db1a3ae4fd9617bb11c2bc514bb8
      body: |
        This allow long running tasks (e.g. downloading a large file) to report
        intermediate progress of the operation (e.g. download progress) that the
        agent can report to its subscribers.
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
  version: 0.13.1
  title: ""
  date: 2023-07-08T00:53:50.187Z
- commits:
    - subject: Remove RedirectTask
      hash: 2ac6052b4003dbb44d63d60d6a1b2c9e5e60aaf3
      body: |
        While a redirect task is not a bad concept, it is really not necessary
        as creatively made methods will achieve the same thing without too much
        code overhead. Redirect tasks also get in the way of some planned
        improvements like parallel tasks and task lensing as I anticipate they
        will only make implementation harder.
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
    - subject: Remove `id` from valid task creation arguments
      hash: 8a63a8ca14ff2a0aba513b65d1f0c21747c0fdd7
      body: |
        There is no real benefit on allowing users to set task ids and it adds
        the risk of messing with planning.

        Removing also makes it unnecessary to check for duplicates.
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
  version: 0.13.0
  title: ""
  date: 2023-07-08T00:00:23.401Z
- commits:
    - subject: Remove the need for async `seek()` method in Agent
      hash: f05b7d1cb1cb59fc1622241085495ee602909a7e
      body: |
        This makes the API simpler an more intuitive.
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
    - subject: Make Agent into an Observable
      hash: bd8eebe9aa7bfd5e76872fffb55da1446593dea2
      body: |
        This allows other services to be notified of changes in the state.
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
    - subject: Refactor agent runtime
      hash: 84fa0251aa9c675ff718b46931e62eda7c980802
      body: |
        Organize and cleanup code
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
    - subject: Simplify the Agent interface
      hash: 706c75ea4d3632f32c935e1583a993702afa6f85
      body: |
        This removes the `start` and `target` methods and replaces them with
        a `seek`, that will cancel any running executions before starting the
        search for a new plan.
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
    - subject: Simplify observable implementation
      hash: 6fd81f905ea6bda168206cec57ea3ebe0158245b
      body: |
        The implementation is now more consistent with typical observable
        definitions.
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
    - subject: Move `equals` json helper outside of diff
      hash: c0f130c29071a398dbe84e5dd39eaba3d2f4c040
      body: ""
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
    - subject: Remove the `wait` function from observable
      hash: eedd1de0310352a34246cdd8d39bc2476f930124
      body: |
        Although it might be nice to have in some cases, it  is not really
        used by the agent and it makes Observable definition more complex
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
    - subject: Remove callable syntax from Observable
      hash: cc9900852d3edfe390ae5d6397a3bb192b2cb0e7
      body: |
        It really is not necessary and it really just makes creating observables
        from classes much harder
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
  version: 0.12.0
  title: ""
  date: 2023-07-07T23:03:23.133Z
- commits:
    - subject: Improve 'Initializer' helper task
      hash: aa5fc245a8e07e8abbdba3e3c41e96b34fd50d70
      body: |
        Renames the 'Constructor' task to 'Initializer' and improves the
        interface to make it more intuitive what the task does.

        This also adds a `Disposer` helper task that allows cleaning up the
        state to remove properties that are no longer needed.
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
    - subject: Create NoOp helper
      hash: 0d6922cd4f7f170d11112be12c79167a1003c9dc
      body: ""
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
    - subject: Allow returning single task from method
      hash: 5ecf86575fc95b4c9a1a568c44abb360b53b1f08
      body: |
        Method tasks can now return a single tasks or an array.
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
    - subject: Improve default description for tasks
      hash: 04b2927412e97bff70f5b2d97326bfae8d4b8176
      body: ""
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
    - subject: Add `path` property to Context type
      hash: 76fe6b0243267a7f3393e067a52d0535b47172a9
      body: |
        This also improves readability for the `Context` type.
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
    - subject: Refactor task module
      hash: 14e99ad3cf05bdd5abe49485d7f265fe123a3a1f
      body: |
        Split the previous `task.ts` into multiple files for better readability
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
    - subject: Move task.ts to task/index.ts
      hash: 834c0ef74ebd6435bc2b05b2af4fceff3afbde53
      body: |
        First step to break up task
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
  version: 0.11.0
  title: ""
  date: 2023-06-23T16:53:19.301Z
- commits:
    - subject: Add orchestrator test using redirect task
      hash: ece0c364d628a28085f7891c5f03e68bef3d390f
      body: ""
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
    - subject: Add support for redirect tasks
      hash: 2046945f24eb2946e10ef55054724379a0ba7568
      body: >
        A redirect task allows to define one or more targets for the planner to
        seek when

        receiving a target. For instance, if the agent is a robot that

        needs to get from A -> B but there is an obstacle in the path, then the

        task could identify the obstacle and tell the planner to go from A -> C

        and then from C -> B in order to reach the target.
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
  version: 0.10.0
  title: ""
  date: 2023-06-22T21:43:21.578Z
- commits:
    - subject: Refactor planner module
      hash: 80cc80867ba124954ae5756f4dfe14d38820c2ab
      body: |
        This splits up the `planner.ts` module into multiple files under
        `lib/planner`, it also renames some methods, properties for better
        readability.
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
    - subject: Move lib/planner.ts to lib/planner/index.ts
      hash: 304768ebbc4a2db57a75741c7c6af1e075e54443
      body: |
        This is the first step in refactoring the planner
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
    - subject: Remove extractPath utility function from planner
      hash: 61ddf5da9ad4d743b40c4ef125789f831552d9c8
      body: >
        The function was leftover from before improving the [diff
        calculation](https://github.com/balena-io-modules/mahler/commit/3682d3c6e39f4c9b97fd287565ca609803af12fb).
        The function is no longer needed.
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
  version: 0.9.3
  title: ""
  date: 2023-06-22T15:12:00.795Z
- commits:
    - subject: Add service migration task to orchestrator example
      hash: c493fb9f1bee1d7cd50874442f1b55d1345fe943
      body: |
        This adds a new task to handle the case where a service has not changed
        between the current and target release. In this case the orchestrator
        should just rename the container and do nothing else
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
  version: 0.9.2
  title: ""
  date: 2023-06-19T23:02:50.035Z
- commits:
    - subject: Add usage information to README files
      hash: fc4f1d0b184200bff9305a7f0cf5d7a8f971c45c
      body: ""
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
  version: 0.9.1
  title: ""
  date: 2023-06-19T22:00:25.024Z
- commits:
    - subject: Add some documentation for examples under tests/
      hash: c24319e9d3d06fc2dd5e6379f729056032844723
      body: ""
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
    - subject: Add release update to agent tests
      hash: 7ce747fa3a38201393fa11b99885450e8de4d1e5
      body: ""
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
    - subject: Make Task context aware of the operation
      hash: 115d61c90a6d6a0820d4e61f0ae1e63c5d86bb41
      body: |
        Tasks declared for a `delete` operation no longer receive a `target`
        property, since it does not make sense with the way delete operation
        works. This also makes it simpler to call delete tasks as less data
        needs to be passed to the grounding function.
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
    - subject: Add `del()` function to context
      hash: 579df5870471c3c932da1beacd6e987154da6276
      body: |
        This allows to remove the element referenced by the path.

        It is useful for modifying the state of a deeply nested value.
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
    - subject: Add orchestrator example/integration tests
      hash: 24dc1a524b7aaa8a6f6ddfb3c5ca3f095d126bfd
      body: |
        This will provide an example of release management using HTN
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
    - subject: Create utility tasks for operating on state
      hash: 627cb8f11c54acbb2ec0356549a6ba3beb5fd3f2
      body: |
        This creates some utility tasks to perform some common operations in
        the state of the system.

        - A `NoOp` task can be used for debugging under some conditions
        - A `Pure` task is a task that only performs transforms on the local
          state without affecting the system (e.g. a cleanup)
        - A `Constructor` task is used for initializing an element of the state
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
    - subject: Improve diff calculation to return all possible ops
      hash: 3682d3c6e39f4c9b97fd287565ca609803af12fb
      body: |
        A change in a deep property of a state object implies
        some operations on the object hierarchy, for instance a `delete` of a
        key `/a/b/c/d`, implies an `update` operation on `/`, `/a`, `/a/b` and
        `/a/b/c/d`, this means that any task defined for one of these paths is
        applicable to the operation.

        This change updates the `Diff` implementation so it generates all
        possible combination of changes
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
    - subject: Improve Action/Method interfaces to be callable
      hash: b005e933b5d1c079a2ef59e3ac330f43f326ecc2
      body: |
        This makes the interface more consistent with ActionTask/MethodTasks and
        provides better usability for testing.
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
    - subject: Improve task types for testing
      hash: 1617fe2cf055eb516d71a6fb15d3c69e96061e0f
      body: |
        Task.of now returns the proper type (MethodTask or ActionTask) depending
        on the input. This makes it easier to use these types as part of
        testing. However, this comes with the tradeoff that tasks need to at
        least defined an `effect` property or a `method` property to be type
        checked correctly.
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
    - subject: Split composer tests into multiple files
      hash: e8dd4018394d67baf6bbbfb544d5ded4075aed65
      body: ""
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
  version: 0.9.0
  title: ""
  date: 2023-06-19T21:19:54.054Z
- commits:
    - subject: Remove tests from build
      hash: 20ff3dbea6dc84d48289e3ad5f676d0f3e6d3f4a
      body: |
        Fix package build by removing tests. Before the package would be
        unusable as the configuration in `package.json` would not match the
        build folder structure.
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
  version: 0.8.1
  title: ""
  date: 2023-06-09T19:34:38.664Z
- commits:
    - subject: Refactor Diff interface
      hash: 89e8401dae78fa5339944c3bf7083146f80c07d7
      body: >
        Creating a new instance with `Diff.of` will now return a function to

        calculate pending operations. This removes the public `patch` function as that

        is not used by the planner and that is replaced by a readonly property

        returning the result of patching a source object with the provided target.
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
  version: 0.8.0
  title: ""
  date: 2023-05-10T22:10:21.013Z
- commits:
    - subject: Refactor agent, split into multiple files
      hash: c96373e2ddcc06ac40aa3256f682667beab1bde0
      body: |
        This moves the runtime behavior of the agent to a `Runtime` class, now
        under `lib/agent/runtime.ts`, making the code easier to read. The agent
        interface definition is now under `lib/agent/index.ts`

        This also modifies the behavior of the agent from polling to being
        influenced by sensors. Configuring an agent with `follow` true, means
        that new state changes coming from sensors will trigger re-plans to
        check if the state has gone off-target.
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
  version: 0.7.0
  title: ""
  date: 2023-05-09T15:56:29.374Z
- commits:
    - subject: Make task description default to the id
      hash: 65a5962d02648e1e725320d737e1288abe8ffe9e
      body: |
        Also add some additional loging in unit tests.
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
    - subject: Simplify task interface and remove unused code
      hash: 30687ff9cb1164501d25c57cd154e95058fd083a
      body: |
        This removes path and target from `Instance` interface in `task.ts` in
        favour of comparing by an id generated as a sha256 hash of the grounded
        task info. This simplifies the interface and makes comparison easier,
        removing the need for the `json.ts` utils module
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
  version: 0.6.0
  title: ""
  date: 2023-05-05T23:34:56.128Z
- commits:
    - subject: Allow providing a planner instance to Agent init
      hash: 7b7a7685488dc74ea7c2af8df343c1572f0cebf1
      body: |
        This allows custom planners to be given to an agent instance.
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
  version: 0.5.0
  title: ""
  date: 2023-05-05T22:11:30.730Z
- commits:
    - subject: Improve plan search trace logic
      hash: 0c84a620f554d8d170bd5512df79102122f3e16a
      body: |
        Trace is now given an object with the state of the search. Loggers are
        welcome to parse the object as they see fit.
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
    - subject: Refactor findPlan function of planne for readability
      hash: bd76a0e2d6e5157fc475f0a7d7db59570fb3c46b
      body: ""
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
    - subject: Refactor planner to return a result object
      hash: cab7ca51f7d4dbe143b238ca54a6a879b9796c87
      body: |
        The object now also returns planner stats, which can be used
        to benchmark changes in the knowledge based
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
    - subject: Rename Planner.plan to Planner.find
      hash: 3b6b2a9c5f7d2f4f8773949dad18413e6cf41060
      body: ""
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
    - subject: Make debug module a dev dependency
      hash: e1209d5773b5f7047708a5d687c1e4b4186099c1
      body: |
        Agent now receives a partial logger, where missing functions will be
        replaced by the defaults in NullLogger. The debug module is only used
        for tests
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
    - subject: Simplify PlanNotFound error
      hash: cf6505d2d259f9c6cc6226fabba9a79d7f4bed8c
      body: |
        Remove the `unnapplied` property as it wasn't that useful.
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
    - subject: Allow passing a debugging function to the planner
      hash: 55b22a7eb6390291a8e61a9166d780faac60aef2
      body: |
        This allows to debug the plan search during development and identify
        bugs in the task definitions
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
  version: 0.4.0
  title: ""
  date: 2023-05-05T19:55:31.113Z
- commits:
    - subject: Change '*' to 'update' as default task operation
      hash: 8bd9f3a49f6c5289529d07555c38ee30984118f1
      body: |
        After creating the applicability table between tasks and state
        operations, it became clear that these two values had the same effect,
        so '*' was removed for simplicity
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
  version: 0.3.0
  title: ""
  date: 2023-04-29T17:37:55.595Z
- commits:
    - subject: Add updating tasks to container composer tests
      hash: fc4f66364b2dd37fa2496bf8c3d3fa844f067ec5
      body: ""
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
    - subject: Add debugging to planning function
      hash: 266cc987f292d27fe60d7425686786196116f1da
      body: |
        This helps debug reasons for planning failure
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
    - subject: Calculate the target before planning
      hash: 95167c187444815866dd199ca11b741e1e5a7e54
      body: |
        The target state was being calculated at each planning state, allowing
        effects to leech into next iterations of the plan via the target.

        This now calculates the target state only at the beginning, when the
        current state comes from the actual system state. While this is still
        not perfect, as the target may end up containing stuff that we really
        might not want in the final state (think a container re-start, where
        we don't care about the final containerId), the target at least is
        calculated from real data
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
    - subject: Split service tasks into install and start
      hash: 3891cf7f209d5743b015cb78558b6324839aafc8
      body: |
        This allows to handle more granular scenarios, for instance, that the
        service stopped on error and we want it to be restarted.
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
    - subject: Rename docker-compose test to container-compose
      hash: f61c4ed63a4da024bae52ae12bf5b3599ba3a35d
      body: ""
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
  version: 0.2.0
  title: ""
  date: 2023-04-29T00:59:58.877Z
- commits:
    - subject: Add service to docker-compose to enable flowzone testing
      hash: 8422902ede14e359c4394ef27083325ed2b13172
      body: |
        Also set the logging level for tests
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
    - subject: Move default logger to its own module
      hash: 1f3a0914665fcdd0d6fd9679ffa94d36cfa6f851
      body: ""
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
    - subject: Setup flowzone
      hash: 6962d09ab00e6f191c3eeec535450d996f336ed7
      body: |
        Set the change to minor so the first published version is 0.1.0
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
    - subject: Update package.json with repository metadata
      hash: 4fd6666505c812583d4732e357448b0d61b33db2
      body: ""
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
  version: 0.1.0
  title: ""
  date: 2023-04-24T22:22:00.390Z
