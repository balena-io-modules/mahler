import { Fn } from './types';

/**
 * Chain functions from left to right.
 *
 * Returns a new function that receives the same arguments as first
 * function and returns the result of the last function.
 *
 * The first function may have an arity larger than 1
 */
export function flow<A extends any[], B>(fa: (...a: A) => B): (...a: A) => B;
// This repetition is necessary unfortunately to ensure that typescript can
// infer the correct types for the arguments
export function flow<A extends any[], B, C>(
	fa: (...a: A) => B,
	fb: Fn<B, C>,
): (...a: A) => C;
export function flow<A extends any[], B, C, D>(
	fa: (...a: A) => B,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
): (...a: A) => D;
export function flow<A extends any[], B, C, D, E>(
	fa: (...a: A) => B,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
): (...a: A) => E;
export function flow<A extends any[], B, C, D, E, F>(
	fa: (...a: A) => B,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
	fe: Fn<E, F>,
): (...a: A) => F;
export function flow<A extends any[], B, C, D, E, F, G>(
	fa: (...a: A) => B,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
	fe: Fn<E, F>,
	fg: Fn<F, G>,
): (...a: A) => G;
export function flow<A extends any[], B, C, D, E, F, G, H>(
	fa: (...a: A) => B,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
	fe: Fn<E, F>,
	fg: Fn<F, G>,
	fh: Fn<G, H>,
): (...a: A) => H;
export function flow<A extends any[], B, C, D, E, F, G, H, I>(
	fa: (...a: A) => B,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
	fe: Fn<E, F>,
	fg: Fn<F, G>,
	fh: Fn<G, H>,
	fi: Fn<H, I>,
): (...a: A) => I;
export function flow<A extends any[], B, C, D, E, F, G, H, I, J>(
	fa: (...a: A) => B,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
	fe: Fn<E, F>,
	fg: Fn<F, G>,
	fh: Fn<G, H>,
	fi: Fn<H, I>,
	fj: Fn<I, J>,
): (...a: A) => J;
export function flow<A extends any[], B, C, D, E, F, G, H, I, J, K>(
	fa: (...a: A) => B,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
	fe: Fn<E, F>,
	fg: Fn<F, G>,
	fh: Fn<G, H>,
	fi: Fn<H, I>,
	fj: Fn<I, J>,
	fk: Fn<J, K>,
): (...a: A) => K;
export function flow<A extends any[], B, C, D, E, F, G, H, I, J, K, L>(
	fa: (...a: A) => B,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
	fe: Fn<E, F>,
	fg: Fn<F, G>,
	fh: Fn<G, H>,
	fi: Fn<H, I>,
	fj: Fn<I, J>,
	fk: Fn<J, K>,
	fl: Fn<K, L>,
): (...a: A) => L;
export function flow<A extends any[], B, C, D, E, F, G, H, I, J, K, L, M>(
	fa: (...a: A) => B,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
	fe: Fn<E, F>,
	fg: Fn<F, G>,
	fh: Fn<G, H>,
	fi: Fn<H, I>,
	fj: Fn<I, J>,
	fk: Fn<J, K>,
	fl: Fn<K, L>,
	fm: Fn<L, M>,
): (...a: A) => M;
export function flow<A extends any[], B, C, D, E, F, G, H, I, J, K, L, M, N>(
	fa: (...a: A) => B,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
	fe: Fn<E, F>,
	fg: Fn<F, G>,
	fh: Fn<G, H>,
	fi: Fn<H, I>,
	fj: Fn<I, J>,
	fk: Fn<J, K>,
	fl: Fn<K, L>,
	fm: Fn<L, M>,
	fn: Fn<M, N>,
): (...a: A) => N;
export function flow<A extends any[], B, C, D, E, F, G, H, I, J, K, L, M, N, O>(
	fa: (...a: A) => B,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
	fe: Fn<E, F>,
	fg: Fn<F, G>,
	fh: Fn<G, H>,
	fi: Fn<H, I>,
	fj: Fn<I, J>,
	fk: Fn<J, K>,
	fl: Fn<K, L>,
	fm: Fn<L, M>,
	fn: Fn<M, N>,
	fo: Fn<N, O>,
): (...a: A) => O;
export function flow<
	A extends any[],
	B,
	C,
	D,
	E,
	F,
	G,
	H,
	I,
	J,
	K,
	L,
	M,
	N,
	O,
	P,
>(
	fa: (...a: A) => B,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
	fe: Fn<E, F>,
	fg: Fn<F, G>,
	fh: Fn<G, H>,
	fi: Fn<H, I>,
	fj: Fn<I, J>,
	fk: Fn<J, K>,
	fl: Fn<K, L>,
	fm: Fn<L, M>,
	fn: Fn<M, N>,
	fo: Fn<N, O>,
	fp: Fn<O, P>,
): (...a: A) => P;
export function flow<
	A extends any[],
	B,
	C,
	D,
	E,
	F,
	G,
	H,
	I,
	J,
	K,
	L,
	M,
	N,
	O,
	P,
	Q,
>(
	fa: (...a: A) => B,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
	fe: Fn<E, F>,
	fg: Fn<F, G>,
	fh: Fn<G, H>,
	fi: Fn<H, I>,
	fj: Fn<I, J>,
	fk: Fn<J, K>,
	fl: Fn<K, L>,
	fm: Fn<L, M>,
	fn: Fn<M, N>,
	fo: Fn<N, O>,
	fp: Fn<O, P>,
	fq: Fn<P, Q>,
): (...a: A) => Q;
export function flow<
	A extends any[],
	B,
	C,
	D,
	E,
	F,
	G,
	H,
	I,
	J,
	K,
	L,
	M,
	N,
	O,
	P,
	Q,
	R,
>(
	fa: (...a: A) => B,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
	fe: Fn<E, F>,
	fg: Fn<F, G>,
	fh: Fn<G, H>,
	fi: Fn<H, I>,
	fj: Fn<I, J>,
	fk: Fn<J, K>,
	fl: Fn<K, L>,
	fm: Fn<L, M>,
	fn: Fn<M, N>,
	fo: Fn<N, O>,
	fp: Fn<O, P>,
	fq: Fn<P, Q>,
	fr: Fn<Q, R>,
): (...a: A) => R;
export function flow<
	A extends any[],
	B,
	C,
	D,
	E,
	F,
	G,
	H,
	I,
	J,
	K,
	L,
	M,
	N,
	O,
	P,
	Q,
	R,
	S,
>(
	fa: (...a: A) => B,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
	fe: Fn<E, F>,
	fg: Fn<F, G>,
	fh: Fn<G, H>,
	fi: Fn<H, I>,
	fj: Fn<I, J>,
	fk: Fn<J, K>,
	fl: Fn<K, L>,
	fm: Fn<L, M>,
	fn: Fn<M, N>,
	fo: Fn<N, O>,
	fp: Fn<O, P>,
	fq: Fn<P, Q>,
	fr: Fn<Q, R>,
	fs: Fn<R, S>,
): (...a: A) => S;
export function flow<
	A extends any[],
	B,
	C,
	D,
	E,
	F,
	G,
	H,
	I,
	J,
	K,
	L,
	M,
	N,
	O,
	P,
	Q,
	R,
	S,
	T,
>(
	fa: (...a: A) => B,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
	fe: Fn<E, F>,
	fg: Fn<F, G>,
	fh: Fn<G, H>,
	fi: Fn<H, I>,
	fj: Fn<I, J>,
	fk: Fn<J, K>,
	fl: Fn<K, L>,
	fm: Fn<L, M>,
	fn: Fn<M, N>,
	fo: Fn<N, O>,
	fp: Fn<O, P>,
	fq: Fn<P, Q>,
	fr: Fn<Q, R>,
	fs: Fn<R, S>,
	ft: Fn<S, T>,
): (...a: A) => T;
export function flow<
	A extends any[],
	B,
	C,
	D,
	E,
	F,
	G,
	H,
	I,
	J,
	K,
	L,
	M,
	N,
	O,
	P,
	Q,
	R,
	S,
	T,
	U,
>(
	fa: (...a: A) => B,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
	fe: Fn<E, F>,
	fg: Fn<F, G>,
	fh: Fn<G, H>,
	fi: Fn<H, I>,
	fj: Fn<I, J>,
	fk: Fn<J, K>,
	fl: Fn<K, L>,
	fm: Fn<L, M>,
	fn: Fn<M, N>,
	fo: Fn<N, O>,
	fp: Fn<O, P>,
	fq: Fn<P, Q>,
	fr: Fn<Q, R>,
	fs: Fn<R, S>,
	ft: Fn<S, T>,
	fu: Fn<T, U>,
): (...a: A) => U;
export function flow<
	A extends any[],
	B,
	C,
	D,
	E,
	F,
	G,
	H,
	I,
	J,
	K,
	L,
	M,
	N,
	O,
	P,
	Q,
	R,
	S,
	T,
	U,
	V,
>(
	fa: (...a: A) => B,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
	fe: Fn<E, F>,
	fg: Fn<F, G>,
	fh: Fn<G, H>,
	fi: Fn<H, I>,
	fj: Fn<I, J>,
	fk: Fn<J, K>,
	fl: Fn<K, L>,
	fm: Fn<L, M>,
	fn: Fn<M, N>,
	fo: Fn<N, O>,
	fp: Fn<O, P>,
	fq: Fn<P, Q>,
	fr: Fn<Q, R>,
	fs: Fn<R, S>,
	ft: Fn<S, T>,
	fu: Fn<T, U>,
	fv: Fn<U, V>,
): (...a: A) => V;
export function flow<
	A extends any[],
	B,
	C,
	D,
	E,
	F,
	G,
	H,
	I,
	J,
	K,
	L,
	M,
	N,
	O,
	P,
	Q,
	R,
	S,
	T,
	U,
	V,
	W,
>(
	fa: (...a: A) => B,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
	fe: Fn<E, F>,
	fg: Fn<F, G>,
	fh: Fn<G, H>,
	fi: Fn<H, I>,
	fj: Fn<I, J>,
	fk: Fn<J, K>,
	fl: Fn<K, L>,
	fm: Fn<L, M>,
	fn: Fn<M, N>,
	fo: Fn<N, O>,
	fp: Fn<O, P>,
	fq: Fn<P, Q>,
	fr: Fn<Q, R>,
	fs: Fn<R, S>,
	ft: Fn<S, T>,
	fu: Fn<T, U>,
	fv: Fn<U, V>,
	fw: Fn<V, W>,
): (...a: A) => W;
export function flow(fa: (...a: any[]) => any, ...fns: Array<Fn<any, any>>) {
	return fns.reduce(
		(f, g) =>
			(...a) =>
				g(f(...a)),
		fa,
	);
}

/**
 * Chain functions from left to right and return the result applied to
 * the initial argument.
 */
export function pipe<A>(a: A): A;
export function pipe<A, B>(a: A, fa: Fn<A, B>): B;
// This repetition is necessary unfortunately to ensure that typescript can
// infer the correct types for the arguments
export function pipe<A, B, C>(a: A, fa: Fn<A, B>, fb: Fn<B, C>): C;
export function pipe<A, B, C, D>(
	a: A,
	fa: Fn<A, B>,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
): D;
export function pipe<A, B, C, D, E>(
	a: A,
	fa: Fn<A, B>,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
): E;
export function pipe<A, B, C, D, E, F>(
	a: A,
	fa: Fn<A, B>,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
	fe: Fn<E, F>,
): F;
export function pipe<A, B, C, D, E, F, G>(
	a: A,
	fa: Fn<A, B>,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
	fe: Fn<E, F>,
	fg: Fn<F, G>,
): G;
export function pipe<A, B, C, D, E, F, G, H>(
	a: A,
	fa: Fn<A, B>,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
	fe: Fn<E, F>,
	fg: Fn<F, G>,
	fh: Fn<G, H>,
): H;
export function pipe<A, B, C, D, E, F, G, H, I>(
	a: A,
	fa: Fn<A, B>,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
	fe: Fn<E, F>,
	fg: Fn<F, G>,
	fh: Fn<G, H>,
	fi: Fn<H, I>,
): I;
export function pipe<A, B, C, D, E, F, G, H, I, J>(
	a: A,
	fa: Fn<A, B>,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
	fe: Fn<E, F>,
	fg: Fn<F, G>,
	fh: Fn<G, H>,
	fi: Fn<H, I>,
	fj: Fn<I, J>,
): J;
export function pipe<A, B, C, D, E, F, G, H, I, J, K>(
	a: A,
	fa: Fn<A, B>,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
	fe: Fn<E, F>,
	fg: Fn<F, G>,
	fh: Fn<G, H>,
	fi: Fn<H, I>,
	fj: Fn<I, J>,
	fk: Fn<J, K>,
): K;
export function pipe<A, B, C, D, E, F, G, H, I, J, K, L>(
	a: A,
	fa: Fn<A, B>,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
	fe: Fn<E, F>,
	fg: Fn<F, G>,
	fh: Fn<G, H>,
	fi: Fn<H, I>,
	fj: Fn<I, J>,
	fk: Fn<J, K>,
	fl: Fn<K, L>,
): L;
export function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M>(
	a: A,
	fa: Fn<A, B>,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
	fe: Fn<E, F>,
	fg: Fn<F, G>,
	fh: Fn<G, H>,
	fi: Fn<H, I>,
	fj: Fn<I, J>,
	fk: Fn<J, K>,
	fl: Fn<K, L>,
	fm: Fn<L, M>,
): M;
export function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(
	a: A,
	fa: Fn<A, B>,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
	fe: Fn<E, F>,
	fg: Fn<F, G>,
	fh: Fn<G, H>,
	fi: Fn<H, I>,
	fj: Fn<I, J>,
	fk: Fn<J, K>,
	fl: Fn<K, L>,
	fm: Fn<L, M>,
	fn: Fn<M, N>,
): N;
export function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(
	a: A,
	fa: Fn<A, B>,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
	fe: Fn<E, F>,
	fg: Fn<F, G>,
	fh: Fn<G, H>,
	fi: Fn<H, I>,
	fj: Fn<I, J>,
	fk: Fn<J, K>,
	fl: Fn<K, L>,
	fm: Fn<L, M>,
	fn: Fn<M, N>,
	fo: Fn<N, O>,
): O;
export function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(
	a: A,
	fa: Fn<A, B>,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
	fe: Fn<E, F>,
	fg: Fn<F, G>,
	fh: Fn<G, H>,
	fi: Fn<H, I>,
	fj: Fn<I, J>,
	fk: Fn<J, K>,
	fl: Fn<K, L>,
	fm: Fn<L, M>,
	fn: Fn<M, N>,
	fo: Fn<N, O>,
	fp: Fn<O, P>,
): P;
export function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(
	a: A,
	fa: Fn<A, B>,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
	fe: Fn<E, F>,
	fg: Fn<F, G>,
	fh: Fn<G, H>,
	fi: Fn<H, I>,
	fj: Fn<I, J>,
	fk: Fn<J, K>,
	fl: Fn<K, L>,
	fm: Fn<L, M>,
	fn: Fn<M, N>,
	fo: Fn<N, O>,
	fp: Fn<O, P>,
	fq: Fn<P, Q>,
): Q;
export function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R>(
	a: A,
	fa: Fn<A, B>,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
	fe: Fn<E, F>,
	fg: Fn<F, G>,
	fh: Fn<G, H>,
	fi: Fn<H, I>,
	fj: Fn<I, J>,
	fk: Fn<J, K>,
	fl: Fn<K, L>,
	fm: Fn<L, M>,
	fn: Fn<M, N>,
	fo: Fn<N, O>,
	fp: Fn<O, P>,
	fq: Fn<P, Q>,
	fr: Fn<Q, R>,
): R;
export function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S>(
	a: A,
	fa: Fn<A, B>,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
	fe: Fn<E, F>,
	fg: Fn<F, G>,
	fh: Fn<G, H>,
	fi: Fn<H, I>,
	fj: Fn<I, J>,
	fk: Fn<J, K>,
	fl: Fn<K, L>,
	fm: Fn<L, M>,
	fn: Fn<M, N>,
	fo: Fn<N, O>,
	fp: Fn<O, P>,
	fq: Fn<P, Q>,
	fr: Fn<Q, R>,
	fs: Fn<R, S>,
): S;
export function pipe<
	A,
	B,
	C,
	D,
	E,
	F,
	G,
	H,
	I,
	J,
	K,
	L,
	M,
	N,
	O,
	P,
	Q,
	R,
	S,
	T,
>(
	a: A,
	fa: Fn<A, B>,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
	fe: Fn<E, F>,
	fg: Fn<F, G>,
	fh: Fn<G, H>,
	fi: Fn<H, I>,
	fj: Fn<I, J>,
	fk: Fn<J, K>,
	fl: Fn<K, L>,
	fm: Fn<L, M>,
	fn: Fn<M, N>,
	fo: Fn<N, O>,
	fp: Fn<O, P>,
	fq: Fn<P, Q>,
	fr: Fn<Q, R>,
	fs: Fn<R, S>,
	ft: Fn<S, T>,
): T;
export function pipe<
	A,
	B,
	C,
	D,
	E,
	F,
	G,
	H,
	I,
	J,
	K,
	L,
	M,
	N,
	O,
	P,
	Q,
	R,
	S,
	T,
	U,
>(
	a: A,
	fa: Fn<A, B>,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
	fe: Fn<E, F>,
	fg: Fn<F, G>,
	fh: Fn<G, H>,
	fi: Fn<H, I>,
	fj: Fn<I, J>,
	fk: Fn<J, K>,
	fl: Fn<K, L>,
	fm: Fn<L, M>,
	fn: Fn<M, N>,
	fo: Fn<N, O>,
	fp: Fn<O, P>,
	fq: Fn<P, Q>,
	fr: Fn<Q, R>,
	fs: Fn<R, S>,
	ft: Fn<S, T>,
	fu: Fn<T, U>,
): U;
export function pipe<
	A,
	B,
	C,
	D,
	E,
	F,
	G,
	H,
	I,
	J,
	K,
	L,
	M,
	N,
	O,
	P,
	Q,
	R,
	S,
	T,
	U,
	V,
>(
	a: A,
	fa: Fn<A, B>,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
	fe: Fn<E, F>,
	fg: Fn<F, G>,
	fh: Fn<G, H>,
	fi: Fn<H, I>,
	fj: Fn<I, J>,
	fk: Fn<J, K>,
	fl: Fn<K, L>,
	fm: Fn<L, M>,
	fn: Fn<M, N>,
	fo: Fn<N, O>,
	fp: Fn<O, P>,
	fq: Fn<P, Q>,
	fr: Fn<Q, R>,
	fs: Fn<R, S>,
	ft: Fn<S, T>,
	fu: Fn<T, U>,
	fv: Fn<U, V>,
): V;
export function pipe<
	A,
	B,
	C,
	D,
	E,
	F,
	G,
	H,
	I,
	J,
	K,
	L,
	M,
	N,
	O,
	P,
	Q,
	R,
	S,
	T,
	U,
	V,
	W,
>(
	a: A,
	fa: Fn<A, B>,
	fb: Fn<B, C>,
	fc: Fn<C, D>,
	fd: Fn<D, E>,
	fe: Fn<E, F>,
	fg: Fn<F, G>,
	fh: Fn<G, H>,
	fi: Fn<H, I>,
	fj: Fn<I, J>,
	fk: Fn<J, K>,
	fl: Fn<K, L>,
	fm: Fn<L, M>,
	fn: Fn<M, N>,
	fo: Fn<N, O>,
	fp: Fn<O, P>,
	fq: Fn<P, Q>,
	fr: Fn<Q, R>,
	fs: Fn<R, S>,
	ft: Fn<S, T>,
	fu: Fn<T, U>,
	fv: Fn<U, V>,
	fw: Fn<V, W>,
): W;
export function pipe(a: any, ...fns: Array<Fn<any, any>>) {
	return fns.reduce((acc, f) => f(acc), a);
}
