import { Effect } from './effect';
import { pipe } from './pipe';
import { Fn } from './types';

type EffectFn<A, B> = Fn<Effect<A>, Effect<B>>;

/**
 * Chain functions from left to right, returning an Effect
 *
 * Returns a new function that receives the same arguments as first
 * function and returns the result of the last function.
 */
export function fromPipe<A>(a: A): Effect<A>;
export function fromPipe<A, B>(a: A, fa: EffectFn<A, B>): Effect<B>;
// This repetition is necessary unfortunately to ensure that typescript can
// infer the correct types for the arguments
export function fromPipe<A, B, C>(
	a: A,
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
): Effect<C>;
export function fromPipe<A, B, C, D>(
	a: A,
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
): Effect<D>;
export function fromPipe<A, B, C, D, E>(
	a: A,
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
	fd: EffectFn<D, E>,
): Effect<E>;
export function fromPipe<A, B, C, D, E, F>(
	a: A,
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
	fd: EffectFn<D, E>,
	fe: EffectFn<E, F>,
): Effect<F>;
export function fromPipe<A, B, C, D, E, F, G>(
	a: A,
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
	fd: EffectFn<D, E>,
	fe: EffectFn<E, F>,
	fg: EffectFn<F, G>,
): Effect<G>;
export function fromPipe<A, B, C, D, E, F, G, H>(
	a: A,
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
	fd: EffectFn<D, E>,
	fe: EffectFn<E, F>,
	fg: EffectFn<F, G>,
	fh: EffectFn<G, H>,
): Effect<H>;
export function fromPipe<A, B, C, D, E, F, G, H, I>(
	a: A,
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
	fd: EffectFn<D, E>,
	fe: EffectFn<E, F>,
	fg: EffectFn<F, G>,
	fh: EffectFn<G, H>,
	fi: EffectFn<H, I>,
): Effect<I>;
export function fromPipe<A, B, C, D, E, F, G, H, I, J>(
	a: A,
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
	fd: EffectFn<D, E>,
	fe: EffectFn<E, F>,
	fg: EffectFn<F, G>,
	fh: EffectFn<G, H>,
	fi: EffectFn<H, I>,
	fj: EffectFn<I, J>,
): Effect<J>;
export function fromPipe<A, B, C, D, E, F, G, H, I, J, K>(
	a: A,
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
	fd: EffectFn<D, E>,
	fe: EffectFn<E, F>,
	fg: EffectFn<F, G>,
	fh: EffectFn<G, H>,
	fi: EffectFn<H, I>,
	fj: EffectFn<I, J>,
	fk: EffectFn<J, K>,
): Effect<K>;
export function fromPipe<A, B, C, D, E, F, G, H, I, J, K, L>(
	a: A,
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
	fd: EffectFn<D, E>,
	fe: EffectFn<E, F>,
	fg: EffectFn<F, G>,
	fh: EffectFn<G, H>,
	fi: EffectFn<H, I>,
	fj: EffectFn<I, J>,
	fk: EffectFn<J, K>,
	fl: EffectFn<K, L>,
): Effect<L>;
export function fromPipe<A, B, C, D, E, F, G, H, I, J, K, L, M>(
	a: A,
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
	fd: EffectFn<D, E>,
	fe: EffectFn<E, F>,
	fg: EffectFn<F, G>,
	fh: EffectFn<G, H>,
	fi: EffectFn<H, I>,
	fj: EffectFn<I, J>,
	fk: EffectFn<J, K>,
	fl: EffectFn<K, L>,
	fm: EffectFn<L, M>,
): Effect<M>;
export function fromPipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(
	a: A,
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
	fd: EffectFn<D, E>,
	fe: EffectFn<E, F>,
	fg: EffectFn<F, G>,
	fh: EffectFn<G, H>,
	fi: EffectFn<H, I>,
	fj: EffectFn<I, J>,
	fk: EffectFn<J, K>,
	fl: EffectFn<K, L>,
	fm: EffectFn<L, M>,
	fn: EffectFn<M, N>,
): Effect<N>;
export function fromPipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(
	a: A,
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
	fd: EffectFn<D, E>,
	fe: EffectFn<E, F>,
	fg: EffectFn<F, G>,
	fh: EffectFn<G, H>,
	fi: EffectFn<H, I>,
	fj: EffectFn<I, J>,
	fk: EffectFn<J, K>,
	fl: EffectFn<K, L>,
	fm: EffectFn<L, M>,
	fn: EffectFn<M, N>,
	fo: EffectFn<N, O>,
): Effect<O>;
export function fromPipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(
	a: A,
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
	fd: EffectFn<D, E>,
	fe: EffectFn<E, F>,
	fg: EffectFn<F, G>,
	fh: EffectFn<G, H>,
	fi: EffectFn<H, I>,
	fj: EffectFn<I, J>,
	fk: EffectFn<J, K>,
	fl: EffectFn<K, L>,
	fm: EffectFn<L, M>,
	fn: EffectFn<M, N>,
	fo: EffectFn<N, O>,
	fp: EffectFn<O, P>,
): Effect<P>;
export function fromPipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(
	a: A,
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
	fd: EffectFn<D, E>,
	fe: EffectFn<E, F>,
	fg: EffectFn<F, G>,
	fh: EffectFn<G, H>,
	fi: EffectFn<H, I>,
	fj: EffectFn<I, J>,
	fk: EffectFn<J, K>,
	fl: EffectFn<K, L>,
	fm: EffectFn<L, M>,
	fn: EffectFn<M, N>,
	fo: EffectFn<N, O>,
	fp: EffectFn<O, P>,
	fq: EffectFn<P, Q>,
): Effect<Q>;
export function fromPipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R>(
	a: A,
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
	fd: EffectFn<D, E>,
	fe: EffectFn<E, F>,
	fg: EffectFn<F, G>,
	fh: EffectFn<G, H>,
	fi: EffectFn<H, I>,
	fj: EffectFn<I, J>,
	fk: EffectFn<J, K>,
	fl: EffectFn<K, L>,
	fm: EffectFn<L, M>,
	fn: EffectFn<M, N>,
	fo: EffectFn<N, O>,
	fp: EffectFn<O, P>,
	fq: EffectFn<P, Q>,
	fr: EffectFn<Q, R>,
): Effect<R>;
export function fromPipe<
	A,
	B,
	C,
	D,
	E,
	F,
	G,
	H,
	I,
	J,
	K,
	L,
	M,
	N,
	O,
	P,
	Q,
	R,
	S,
>(
	a: A,
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
	fd: EffectFn<D, E>,
	fe: EffectFn<E, F>,
	fg: EffectFn<F, G>,
	fh: EffectFn<G, H>,
	fi: EffectFn<H, I>,
	fj: EffectFn<I, J>,
	fk: EffectFn<J, K>,
	fl: EffectFn<K, L>,
	fm: EffectFn<L, M>,
	fn: EffectFn<M, N>,
	fo: EffectFn<N, O>,
	fp: EffectFn<O, P>,
	fq: EffectFn<P, Q>,
	fr: EffectFn<Q, R>,
	fs: EffectFn<R, S>,
): Effect<S>;
export function fromPipe<
	A,
	B,
	C,
	D,
	E,
	F,
	G,
	H,
	I,
	J,
	K,
	L,
	M,
	N,
	O,
	P,
	Q,
	R,
	S,
	T,
>(
	a: A,
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
	fd: EffectFn<D, E>,
	fe: EffectFn<E, F>,
	fg: EffectFn<F, G>,
	fh: EffectFn<G, H>,
	fi: EffectFn<H, I>,
	fj: EffectFn<I, J>,
	fk: EffectFn<J, K>,
	fl: EffectFn<K, L>,
	fm: EffectFn<L, M>,
	fn: EffectFn<M, N>,
	fo: EffectFn<N, O>,
	fp: EffectFn<O, P>,
	fq: EffectFn<P, Q>,
	fr: EffectFn<Q, R>,
	fs: EffectFn<R, S>,
	ft: EffectFn<S, T>,
): Effect<T>;
export function fromPipe<
	A,
	B,
	C,
	D,
	E,
	F,
	G,
	H,
	I,
	J,
	K,
	L,
	M,
	N,
	O,
	P,
	Q,
	R,
	S,
	T,
	U,
>(
	a: A,
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
	fd: EffectFn<D, E>,
	fe: EffectFn<E, F>,
	fg: EffectFn<F, G>,
	fh: EffectFn<G, H>,
	fi: EffectFn<H, I>,
	fj: EffectFn<I, J>,
	fk: EffectFn<J, K>,
	fl: EffectFn<K, L>,
	fm: EffectFn<L, M>,
	fn: EffectFn<M, N>,
	fo: EffectFn<N, O>,
	fp: EffectFn<O, P>,
	fq: EffectFn<P, Q>,
	fr: EffectFn<Q, R>,
	fs: EffectFn<R, S>,
	ft: EffectFn<S, T>,
	fu: EffectFn<T, U>,
): Effect<U>;
export function fromPipe<
	A,
	B,
	C,
	D,
	E,
	F,
	G,
	H,
	I,
	J,
	K,
	L,
	M,
	N,
	O,
	P,
	Q,
	R,
	S,
	T,
	U,
	V,
>(
	a: A,
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
	fd: EffectFn<D, E>,
	fe: EffectFn<E, F>,
	fg: EffectFn<F, G>,
	fh: EffectFn<G, H>,
	fi: EffectFn<H, I>,
	fj: EffectFn<I, J>,
	fk: EffectFn<J, K>,
	fl: EffectFn<K, L>,
	fm: EffectFn<L, M>,
	fn: EffectFn<M, N>,
	fo: EffectFn<N, O>,
	fp: EffectFn<O, P>,
	fq: EffectFn<P, Q>,
	fr: EffectFn<Q, R>,
	fs: EffectFn<R, S>,
	ft: EffectFn<S, T>,
	fu: EffectFn<T, U>,
	fv: EffectFn<U, V>,
): Effect<V>;
export function fromPipe(a: any, ...fns: Array<EffectFn<any, any>>) {
	return (pipe as any)(a, Effect.of, ...fns);
}

/**
 * Chain functions from left to right
 *
 * Returns a new function that receives the same arguments as first
 * function and returns the result of the last function.
 */
export function fromFlow<A, B>(fa: EffectFn<A, B>): Effect<B>;
// This repetition is necessary unfortunately to ensure that typescript can
// infer the correct types for the arguments
export function fromFlow<A, B, C>(
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
): Effect<C>;
export function fromFlow<A, B, C, D>(
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
): Effect<D>;
export function fromFlow<A, B, C, D, E>(
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
	fd: EffectFn<D, E>,
): Effect<E>;
export function fromFlow<A, B, C, D, E, F>(
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
	fd: EffectFn<D, E>,
	fe: EffectFn<E, F>,
): Effect<F>;
export function fromFlow<A, B, C, D, E, F, G>(
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
	fd: EffectFn<D, E>,
	fe: EffectFn<E, F>,
	fg: EffectFn<F, G>,
): Effect<G>;
export function fromFlow<A, B, C, D, E, F, G, H>(
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
	fd: EffectFn<D, E>,
	fe: EffectFn<E, F>,
	fg: EffectFn<F, G>,
	fh: EffectFn<G, H>,
): Effect<H>;
export function fromFlow<A, B, C, D, E, F, G, H, I>(
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
	fd: EffectFn<D, E>,
	fe: EffectFn<E, F>,
	fg: EffectFn<F, G>,
	fh: EffectFn<G, H>,
	fi: EffectFn<H, I>,
): Effect<I>;
export function fromFlow<A, B, C, D, E, F, G, H, I, J>(
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
	fd: EffectFn<D, E>,
	fe: EffectFn<E, F>,
	fg: EffectFn<F, G>,
	fh: EffectFn<G, H>,
	fi: EffectFn<H, I>,
	fj: EffectFn<I, J>,
): Effect<J>;
export function fromFlow<A, B, C, D, E, F, G, H, I, J, K>(
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
	fd: EffectFn<D, E>,
	fe: EffectFn<E, F>,
	fg: EffectFn<F, G>,
	fh: EffectFn<G, H>,
	fi: EffectFn<H, I>,
	fj: EffectFn<I, J>,
	fk: EffectFn<J, K>,
): Effect<K>;
export function fromFlow<A, B, C, D, E, F, G, H, I, J, K, L>(
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
	fd: EffectFn<D, E>,
	fe: EffectFn<E, F>,
	fg: EffectFn<F, G>,
	fh: EffectFn<G, H>,
	fi: EffectFn<H, I>,
	fj: EffectFn<I, J>,
	fk: EffectFn<J, K>,
	fl: EffectFn<K, L>,
): Effect<L>;
export function fromFlow<A, B, C, D, E, F, G, H, I, J, K, L, M>(
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
	fd: EffectFn<D, E>,
	fe: EffectFn<E, F>,
	fg: EffectFn<F, G>,
	fh: EffectFn<G, H>,
	fi: EffectFn<H, I>,
	fj: EffectFn<I, J>,
	fk: EffectFn<J, K>,
	fl: EffectFn<K, L>,
	fm: EffectFn<L, M>,
): Effect<M>;
export function fromFlow<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
	fd: EffectFn<D, E>,
	fe: EffectFn<E, F>,
	fg: EffectFn<F, G>,
	fh: EffectFn<G, H>,
	fi: EffectFn<H, I>,
	fj: EffectFn<I, J>,
	fk: EffectFn<J, K>,
	fl: EffectFn<K, L>,
	fm: EffectFn<L, M>,
	fn: EffectFn<M, N>,
): Effect<N>;
export function fromFlow<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
	fd: EffectFn<D, E>,
	fe: EffectFn<E, F>,
	fg: EffectFn<F, G>,
	fh: EffectFn<G, H>,
	fi: EffectFn<H, I>,
	fj: EffectFn<I, J>,
	fk: EffectFn<J, K>,
	fl: EffectFn<K, L>,
	fm: EffectFn<L, M>,
	fn: EffectFn<M, N>,
	fo: EffectFn<N, O>,
): Effect<O>;
export function fromFlow<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
	fd: EffectFn<D, E>,
	fe: EffectFn<E, F>,
	fg: EffectFn<F, G>,
	fh: EffectFn<G, H>,
	fi: EffectFn<H, I>,
	fj: EffectFn<I, J>,
	fk: EffectFn<J, K>,
	fl: EffectFn<K, L>,
	fm: EffectFn<L, M>,
	fn: EffectFn<M, N>,
	fo: EffectFn<N, O>,
	fp: EffectFn<O, P>,
): Effect<P>;
export function fromFlow<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
	fd: EffectFn<D, E>,
	fe: EffectFn<E, F>,
	fg: EffectFn<F, G>,
	fh: EffectFn<G, H>,
	fi: EffectFn<H, I>,
	fj: EffectFn<I, J>,
	fk: EffectFn<J, K>,
	fl: EffectFn<K, L>,
	fm: EffectFn<L, M>,
	fn: EffectFn<M, N>,
	fo: EffectFn<N, O>,
	fp: EffectFn<O, P>,
	fq: EffectFn<P, Q>,
): Effect<Q>;
export function fromFlow<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R>(
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
	fd: EffectFn<D, E>,
	fe: EffectFn<E, F>,
	fg: EffectFn<F, G>,
	fh: EffectFn<G, H>,
	fi: EffectFn<H, I>,
	fj: EffectFn<I, J>,
	fk: EffectFn<J, K>,
	fl: EffectFn<K, L>,
	fm: EffectFn<L, M>,
	fn: EffectFn<M, N>,
	fo: EffectFn<N, O>,
	fp: EffectFn<O, P>,
	fq: EffectFn<P, Q>,
	fr: EffectFn<Q, R>,
): Effect<R>;
export function fromFlow<
	A,
	B,
	C,
	D,
	E,
	F,
	G,
	H,
	I,
	J,
	K,
	L,
	M,
	N,
	O,
	P,
	Q,
	R,
	S,
>(
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
	fd: EffectFn<D, E>,
	fe: EffectFn<E, F>,
	fg: EffectFn<F, G>,
	fh: EffectFn<G, H>,
	fi: EffectFn<H, I>,
	fj: EffectFn<I, J>,
	fk: EffectFn<J, K>,
	fl: EffectFn<K, L>,
	fm: EffectFn<L, M>,
	fn: EffectFn<M, N>,
	fo: EffectFn<N, O>,
	fp: EffectFn<O, P>,
	fq: EffectFn<P, Q>,
	fr: EffectFn<Q, R>,
	fs: EffectFn<R, S>,
): Effect<S>;
export function fromFlow<
	A,
	B,
	C,
	D,
	E,
	F,
	G,
	H,
	I,
	J,
	K,
	L,
	M,
	N,
	O,
	P,
	Q,
	R,
	S,
	T,
>(
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
	fd: EffectFn<D, E>,
	fe: EffectFn<E, F>,
	fg: EffectFn<F, G>,
	fh: EffectFn<G, H>,
	fi: EffectFn<H, I>,
	fj: EffectFn<I, J>,
	fk: EffectFn<J, K>,
	fl: EffectFn<K, L>,
	fm: EffectFn<L, M>,
	fn: EffectFn<M, N>,
	fo: EffectFn<N, O>,
	fp: EffectFn<O, P>,
	fq: EffectFn<P, Q>,
	fr: EffectFn<Q, R>,
	fs: EffectFn<R, S>,
	ft: EffectFn<S, T>,
): Effect<T>;
export function fromFlow<
	A,
	B,
	C,
	D,
	E,
	F,
	G,
	H,
	I,
	J,
	K,
	L,
	M,
	N,
	O,
	P,
	Q,
	R,
	S,
	T,
	U,
>(
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
	fd: EffectFn<D, E>,
	fe: EffectFn<E, F>,
	fg: EffectFn<F, G>,
	fh: EffectFn<G, H>,
	fi: EffectFn<H, I>,
	fj: EffectFn<I, J>,
	fk: EffectFn<J, K>,
	fl: EffectFn<K, L>,
	fm: EffectFn<L, M>,
	fn: EffectFn<M, N>,
	fo: EffectFn<N, O>,
	fp: EffectFn<O, P>,
	fq: EffectFn<P, Q>,
	fr: EffectFn<Q, R>,
	fs: EffectFn<R, S>,
	ft: EffectFn<S, T>,
	fu: EffectFn<T, U>,
): Effect<U>;
export function fromFlow<
	A,
	B,
	C,
	D,
	E,
	F,
	G,
	H,
	I,
	J,
	K,
	L,
	M,
	N,
	O,
	P,
	Q,
	R,
	S,
	T,
	U,
	V,
>(
	fa: EffectFn<A, B>,
	fb: EffectFn<B, C>,
	fc: EffectFn<C, D>,
	fd: EffectFn<D, E>,
	fe: EffectFn<E, F>,
	fg: EffectFn<F, G>,
	fh: EffectFn<G, H>,
	fi: EffectFn<H, I>,
	fj: EffectFn<I, J>,
	fk: EffectFn<J, K>,
	fl: EffectFn<K, L>,
	fm: EffectFn<L, M>,
	fn: EffectFn<M, N>,
	fo: EffectFn<N, O>,
	fp: EffectFn<O, P>,
	fq: EffectFn<P, Q>,
	fr: EffectFn<Q, R>,
	fs: EffectFn<R, S>,
	ft: EffectFn<S, T>,
	fu: EffectFn<T, U>,
	fv: EffectFn<U, V>,
): Effect<V>;
export function fromFlow(...fns: Array<EffectFn<any, any>>) {
	return (a: any) => (pipe as any)(a, Effect.of, ...fns);
}

/**
 * Alias of doFlow for more declarative
 * definitions
 */
export const then = fromFlow;
export const fromSequence = fromFlow;
